<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ToDoApp"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    x:Class="ToDoApp.View.AppDictionary"
                    x:ClassModifier="public">
    <BooleanToVisibilityConverter x:Key="VisibilityConverter" />
    
    <Style x:Key="MyWaterMarkStyle" TargetType="{x:Type TextBox}">   
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border Background="White" BorderBrush="#FF7D8683" BorderThickness="1"/>
                        <ScrollViewer x:Name="PART_ContentHost" Margin="5,0,0,0" VerticalAlignment="Center" />
                        <Label Margin="5,0,0,0" x:Name="WaterMarkLabel" Content="{TemplateBinding Tag}" VerticalAlignment="Center"
                               Visibility="Collapsed" Foreground="Gray" FontFamily="Arial"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="WaterMarkLabel" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="DimGray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <DataTemplate x:Key="DefaultListsSidebarItemTemplate">
        <StackPanel Height="30" Orientation="Horizontal">
            <TextBox x:Name="ToDoListItemTextBox" Width="160" Margin="5,0" VerticalContentAlignment="Center" BorderThickness="0" 
                     IsReadOnly="True" IsReadOnlyCaretVisible="False"
                     Text="{Binding Name}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                        <i:InvokeCommandAction
                            Command="{Binding DataContext.ChooseListCommand, RelativeSource={RelativeSource AncestorType=ListBox}}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
        </StackPanel>
    </DataTemplate>
    
    <DataTemplate x:Key="SidebarItemTemplate">
        <StackPanel Height="30" Orientation="Horizontal">
            <TextBox x:Name="ToDoListItemTextBox" Width="160" Margin="5,0" VerticalContentAlignment="Center" BorderThickness="0" 
                     IsReadOnly="True" IsReadOnlyCaretVisible="False"
                     Text="{Binding Name}"
                     MouseDoubleClick="ToDoListItemTextBox_MouseDoubleClick"
                     LostKeyboardFocus="ToDoListItemTextBox_LostKeyboardFocus">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="LostKeyboardFocus">
                        <i:InvokeCommandAction
                            Command="{Binding DataContext.EditListNameCommand, RelativeSource={RelativeSource AncestorType=ListBox}}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="PreviewMouseLeftButtonUp">
                        <i:InvokeCommandAction
                            Command="{Binding DataContext.ChooseListCommand, RelativeSource={RelativeSource AncestorType=ListBox}}"
                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <Button
                Command="{Binding DataContext.DeleteListCommand, RelativeSource={RelativeSource AncestorType=ListBox}}"
                CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}"
                Content="X" Width="15"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="TaskTemplate">
        <StackPanel Margin="0,5">
            <StackPanel Orientation="Horizontal">
                <CheckBox IsChecked="{Binding IsDone}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Checked">
                            <i:InvokeCommandAction
                                Command="{Binding DataContext.DoTaskCommand, RelativeSource={RelativeSource AncestorType=ListBox}}"
                                CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" />
                        </i:EventTrigger>
                        <i:EventTrigger EventName="Unchecked">
                            <i:InvokeCommandAction
                                Command="{Binding DataContext.DoTaskCommand, RelativeSource={RelativeSource AncestorType=ListBox}}"
                                CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </CheckBox>
                <TextBlock Text="{Binding Name}" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" FlowDirection="RightToLeft">
                <Button
                    Visibility="{Binding DataContext.IsNotTaskEditing, Converter={StaticResource VisibilityConverter}, RelativeSource={RelativeSource AncestorType=ListBox}}"
                    Command="{Binding DataContext.DeleteTaskCommand, RelativeSource={RelativeSource AncestorType=ListBox}}"
                    CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}"
                    Content="Удалить" />
                <Button x:Name="EditTaskButton"
                        Visibility="{Binding DataContext.IsNotTaskEditing, Converter={StaticResource VisibilityConverter}, RelativeSource={RelativeSource AncestorType=ListBox}}"
                        Command="{Binding DataContext.EditTaskCommand, RelativeSource={RelativeSource AncestorType=ListBox}}"
                        CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}"
                        Content="Редактировать" />
                <TextBlock Text="{Binding TextPriority}" />
                <TextBlock Text="{Binding TextRepeating}" />
                <TextBlock Text="{Binding TextDateTime}" />
            </StackPanel>
        </StackPanel>
    </DataTemplate>
    
    <Style x:Key="ListBoxStyle">
        <Setter Property="ListBox.BorderBrush" Value="{x:Null}" />
    </Style>

</ResourceDictionary>